c
( reading[:lat_dir] || reading[:latt_dir] )
( reading[:lat_dir] || reading[:latt_dir] ) == "S"
q
( nema_latitude[0..-8].to_f + nema_latitude[-7..-1].to_f / 60 ) * reading[:lat_dir] == "S" ? -1 : 1
 reading[:lat_dir] == "S" ? -1 : 1
 nema_latitude[0..-8].to_f + nema_latitude[-7..-1].to_f / 60
nema_latitude[-7..-1].to_f / 60
nema_latitude[0..-8].to_f 
nema_latitude[0..-8]
q
nema_latitude[0..-8].to_f + nema_latitude[-7..-1].to_f / 60
nema_latitude
c
GpsReading.last.latitude
self.create(latitude: latitude,longitude: longitude, timestamp: Time.now.utc)
longitude = nema_longitude[0..-8].to_f + nema_longitude[-7..-1].to_f / 60
latitude = nema_latitude[0..-8].to_f + nema_latitude[-7..-1].to_f / 60
nema_longitude[0..-8].to_f + nema_longitude[-7..-1].to_f / 60
nema_latitude[0..-8].to_f + nema_latitude[-7..-1].to_f / 60
c
GpsReading.first.latitude
GpsReading.last.latitude
GpsReading.last.longitude
self.create( latitude: "30", longitude: "150", timestamp: Time.now.utc )
self.create(
GpsReading.last.longitude
GpsReading.last.latitude
GpsReading.last
nema_longitude[0..-8].to_f + nema_longitude[-7..-1].to_f / 60
nema_latitude[0..-8].to_f + nema_latitude[-7..-1].to_f / 60
c
nema_latitude[0..-8].to_f + nema_latitude[-7..-1].to_f / 60
nema_longitude[0..-8].to_f + nema_longitude[-7..-1].to_f / 60
nema_longitude
q
nema_longitude
nema_latitude
q
Time.now.utc
nema_latitude[-7..-1].to_f / 60
nema_latitude[-7..-1].to_f
nema_latitude[-7..-1].to_float
nema_latitude[-7..-1]
nema_latitude[0..-8]
nema_latitude
q
nema_latitude
 reading
q
 reading
q
c
q
params
c
q
reports.map &:consumption
q
c
q
c
readings.sum( :consumption )
readings.count
readings
q
timestamp
q
timestamp
meter.meter_readings.first.timestamp
meter.meter_readings.first
meter.meter_readings.count
readings.count
q
timestamp
Time.now.beginning_of_month - 5.month
Time.now.beginning_of_month - 5.months
Time.now.beginning_of_month
timestamp.beginning_of_month
timestamp.end_of_month
readings.count
readings.sum( :consumption )
timestamp
c
timestamp
readings.sum( :consumption )
c
readings.sum( :consumption )
readings
q
reports.map &:consumption
reports
q
reports.map &:consumption
reports
c
readings.sum( :consumption )
q
readings.count
readings
q
reports.
reports
q
report_for time
report_for
time - 1.month
1.month
reports
q
as_json
to_model
puts self.methods.sort
self.methods.sort
self.methods
q
@meter.destroy
c
Meter.create params[:meter]
params
q
e.message
q
params[:find][:date]
q
@reading.date
session[:find]
q
@reading.
@reading.date
session[:find]
session
c
session[:find]
session[;find]
erb :'maps/finds/show'
c
session[:find]
q
timestamp.class
timestamp
c
q
Reading.first.timestamp
Reading.first.timestamp > datetime
Reading.first.timestamp
Reading.first
Reading.where( "timestamp < ?", datetime )
datetime
c
params
c
datetime
c
q
c
datetime
q
c
q
c
q
datetime
Reading.all[3].timestamp
Reading.all[3].timestamp > datetime
Reading.all[0].timestamp > datetime
Reading[0].timestamp > datetime
Reading.last.timestamp > datetime
Reading.where( "timestamp > ?", datetime.to_i ).count
Reading.where( "timestamp < ?", datetime.to_i ).count
Reading.where( "timestamp < ?", datetime.to_i )
datetime.to_i
date
Reading.last.timestamp
datetime
Reading.where( "timestamp > ?", datetime ).count
Reading.where( "timestamp > ?", datetime )
Reading.where( "timestamp < ?", datetime )
Reading.last.timestamp > datetime
Reading.last.timestamp
Reading.last
datetime
c
Reading.last
datetime
q
"#{date}T#{time}"
q
timestamp.strftime('%Y-%m-%d')
DateTime.new( timestamp.to_s ).strftime('%Y-%m-%d')
DateTime.new( timestamp ).strftime('%Y-%m-%d')
Time.parse( timestamp.to_s )
Time.parse( timestamp )
c
q
c
q
Reading.where("timestamp < ?", DateTime.now()).last.latitude
Reading.where("timestamp < ?", DateTime.now()).last
Reading.where("timestamp < ?", DateTime.now()).count
Reading.where("timestamp < ?", DateTime.now())
Reading
q
Reading.all
Reading
q
{ date: DateTime.now() }.to_json
{ date: DateTime.now() }
DateTime.now().to_i
DateTime.now()
DateTime
q
c
AccountShortcut.all.map { |as| as.destroy unless as.shortcut }
AccountShortcuts.all.map { |as| as.delete unless as.shortcut }
c
q
AccountShortcut.where( account_uid: user_name )[2].delete
c
q
AccountShortcut.where( account_uid: user_name )[2].delete
AccountShortcut.where( account_uid: user_name )[2].shortcut
c
q
AccountShortcut.where( account_uid: user_name )[2].delete
AccountShortcut.where( account_uid: user_name )[2].shortcut
AccountShortcut.where( account_uid: user_name )[1].shortcut
AccountShortcut.where( account_uid: user_name )[0].shortcut
AccountShortcut.where( account_uid: user_name )[0]
AccountShortcut.where( account_uid: user_name )
c
q
AccountShortcut.where( account_uid: user_name )[0].delete
AccountShortcut.where( account_uid: user_name )[0]
Shortcut.find 38
AccountShortcut.where( account_uid: user_name )[0]
AccountShortcut.where( account_uid: user_name ).map( &:shortcut )[1]
AccountShortcut.where( account_uid: user_name ).map( &:shortcut )[0]
AccountShortcut.where( account_uid: user_name ).map( &:shortcut )
AccountShortcut.where( account_uid: user_name ).map( &:shortcut ).sort_by { |v| v.label.downcase }
AccountShortcut.where( account_uid: user_name )
q
user_detail[:groups].find { |group| group[:dn] == "cn=administrators,ou=Groups,dc=engines,dc=internal" }
user_detail[:groups].find { |group| group[:dn] == "cn=administratrs,ou=Groups,dc=engines,dc=internal" }
user_detail[:groups].find { |group| group[:dn] == "cn=administrators,ou=Groups,dc=engines,dc=internal" }
user_detail[:groups]
user_detail
c
user_detail
c
q
system.api.show_users_account( params[:uid] )
params[:uid]
uid
system.api.show_users_account( uid )
system.api
